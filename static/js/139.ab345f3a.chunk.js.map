{"version":3,"file":"static/js/139.ab345f3a.chunk.js","mappings":"iQAEaA,EAAYC,EAAAA,EAAAA,IAAH,wFAKTC,EAASD,EAAAA,EAAAA,OAAH,qX,SCJNE,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzBC,EACNF,EADME,YAAaC,EACnBH,EADmBG,MAAOC,EAC1BJ,EAD0BI,aAAcC,EACxCL,EADwCK,SAAUC,EAClDN,EADkDM,OAAQC,EAC1DP,EAD0DO,aAG5D,OACE,UAACX,EAAD,YACE,SAACE,EAAD,CAAQU,KAAK,SAASC,QAASR,EAA/B,SAAyC,aAGzC,gBACES,IAAG,0CAAqCR,GACxCS,IAAI,GACJC,MAAM,MACNC,OAAO,SAET,0BACGV,EAAM,MAAIC,EAAaU,OAAO,EAAG,GAAG,SAEvC,yBAAG,eAAaC,KAAKC,MAAMT,GAAc,QACzC,wBAAI,cACJ,uBAAIF,KACJ,wBAAI,YACJ,uBACGC,EAAOW,KAAI,SAAAC,GACV,OAAOA,EAAMC,IACd,QAIR,E,QC7BYvB,EAAYC,EAAAA,EAAAA,IAAH,oJAMTuB,EAAQvB,EAAAA,EAAAA,EAAH,iEAILwB,EAAOxB,EAAAA,EAAAA,GAAH,6EAKJyB,GAAOzB,EAAAA,EAAAA,GAAO0B,EAAAA,GAAP1B,CAAH,2UCjBJ2B,EAAiB,WAC5B,OACE,UAAC,EAAD,YACE,SAACJ,EAAD,UAAO,4BACP,UAACC,EAAD,YACE,0BACG,KACD,SAACC,EAAD,CAAMG,GAAI,OAAV,SAAkB,WAFX,SAIT,0BACG,KACD,SAACH,EAAD,CAAMG,GAAI,UAAV,SAAqB,cAFd,gBAOhB,ECwCD,EA9CqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAO1B,EAAP,KAAc2B,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACA,GAA8BL,EAAAA,EAAAA,UAAS,IAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAC9CC,GAAWC,EAAAA,EAAAA,MAqBjB,OAnBAC,EAAAA,EAAAA,YAAU,WACRX,GAAa,GACbY,MAAM,WAAD,OACQC,EAAAA,GADR,kBAC0BhB,EAD1B,mCAC4DiB,EAAAA,KAE9DC,MAAK,SAAAC,GACJ,OAAOA,EAASC,MACjB,IACAF,MAAK,SAAAG,GACJ,OAAOtB,EAASsB,EACjB,IACAC,OAAM,SAAAC,GAAK,OAAIlB,EAAWkB,EAAMC,QAArB,IACXC,QAAQtB,GAAa,GACzB,GAAE,CAACH,IAOF5B,EAAMsD,KACJ,4BACE,SAACvD,EAAD,CAAWC,MAAOA,EAAOC,SAP/B,WACEuC,EAASJ,EAAamB,QACvB,KAMK,SAAC/B,EAAD,IAECM,IAAa,SAAC0B,EAAA,EAAD,IACbxB,IAAW,gBAAIyB,UAAU,SAAd,UAAuB,UAAQzB,EAAQ,oBAEnD,SAAC,EAAA0B,SAAD,CAAUC,UAAU,SAACH,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAKT,C","sources":["components/CardMovie/CardMovie.styled.js","components/CardMovie/CardMovie.jsx","components/Additionalnfo/Additionalnfo.styled.js","components/Additionalnfo/Additionalnfo.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 15px 0;\n  display: flex;\n  flex-direction: column;\n`;\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 120px;\n  height: 40px;\n  margin: 15px 0;\n  border-radius: 10px;\n  background-color: rgba(240, 100, 120, 0.5);\n  font-size: 20px;\n  font-weight: 500;\n  padding: 10px;\n  /* text-align: center; */\n\n  &:hover {\n    background-color: rgba(255, 20, 50, 0.5);\n  }\n`;\n","import { Container, Button } from './CardMovie.styled';\nimport PropTypes from 'prop-types';\n\nexport const CardMovie = ({ movie, onGoBack }) => {\n  const { poster_path, title, release_date, overview, genres, vote_average } =\n    movie;\n\n  return (\n    <Container>\n      <Button type=\"button\" onClick={onGoBack}>\n        Go back\n      </Button>\n      <img\n        src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n        alt=\"\"\n        width=\"160\"\n        height=\"240\"\n      />\n      <h2>\n        {title} ( {release_date.substr(0, 4)} )\n      </h2>\n      <p>User score: {Math.floor(vote_average)}%</p>\n      <h3>Overview</h3>\n      <p>{overview}</p>\n      <h4>Genres</h4>\n      <p>\n        {genres.map(genre => {\n          return genre.name;\n        })}\n      </p>\n    </Container>\n  );\n};\n\nCardMovie.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    vote_average: PropTypes.number.isRequired,\n  }),\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Container = styled.div`\n  border-top: 2px solid rgba(100, 100, 100, 0.5);\n  border-bottom: 2px solid rgba(100, 100, 100, 0.5);\n  margin: 20px 0;\n`;\n\nexport const Title = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n`;\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 15px;\n`;\nexport const Link = styled(NavLink)`\n  display: inline-block;\n  font-size: 20px;\n  font-weight: 500;\n  padding: 10px;\n  border: 1px solid rgba(0, 0, 0, 0.4);\n  border-radius: 10px;\n  background-color: rgba(240, 100, 120, 0.5);\n  margin: 10px 0;\n  text-decoration: none;\n  &:hover {\n    background-color: rgba(255, 20, 50, 0.5);\n  }\n`;\n","import { Title, Container, List, Link } from './Additionalnfo.styled';\nexport const AdditionalInfo = () => {\n  return (\n    <Container>\n      <Title>Additional information</Title>\n      <List>\n        <li key={'cast'}>\n          {' '}\n          <Link to={'cast'}>Cast</Link>\n        </li>\n        <li key={'reviews'}>\n          {' '}\n          <Link to={'reviews'}>Reviews</Link>\n        </li>\n      </List>\n    </Container>\n  );\n};\n","import { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { API_KEY } from 'components/App';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { BASE_URL } from 'components/App';\nimport { Suspense } from 'react';\nimport { CardMovie } from 'components/CardMovie/CardMovie';\nimport { AdditionalInfo } from 'components/Additionalnfo/Additionalnfo';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState('');\n\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/movies');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\n      `https://${BASE_URL}/movie/${movieId}?language=en-US&api_key=${API_KEY}`\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(res => {\n        return setMovie(res);\n      })\n      .catch(error => setIsError(error.message))\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  function onGoBack() {\n    navigate(backLinkHref.current);\n  }\n\n  return (\n    movie.id && (\n      <div>\n        <CardMovie movie={movie} onGoBack={onGoBack} />\n        <AdditionalInfo />\n\n        {isLoading && <Loader />}\n        {isError && <h5 textAlign=\"center\">Sorry. {isError} ðŸ˜­</h5>}\n\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </div>\n    )\n  );\n};\n\nexport default MovieDetails;\n"],"names":["Container","styled","Button","CardMovie","movie","onGoBack","poster_path","title","release_date","overview","genres","vote_average","type","onClick","src","alt","width","height","substr","Math","floor","map","genre","name","Title","List","Link","NavLink","AdditionalInfo","to","useState","setMovie","movieId","useParams","isLoading","setIsLoading","isError","setIsError","location","useLocation","backLinkHref","useRef","state","from","navigate","useNavigate","useEffect","fetch","BASE_URL","API_KEY","then","response","json","res","catch","error","message","finally","id","current","Loader","textAlign","Suspense","fallback"],"sourceRoot":""}